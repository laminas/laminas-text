{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-text This package is considered feature-complete, and is now in security-only maintenance mode, following a decision by the Technical Steering Committee . If you have a security issue, please follow our security reporting guidelines . If you wish to take on the role of maintainer, please nominate yourself Laminas\\Text is a component to work on text strings. It contains the subcomponents: Laminas\\Text\\Figlet that enables developers to create a so called FIGlet text. A FIGlet text is a string, which is represented as ASCII art. FIGlets use a special font format, called FLT (FigLet Font). By default, one standard font is shipped with Laminas\\Text\\Figlet , but you can download additional fonts here Laminas\\Text\\Table to create text based tables on the fly with different decorators. This can be helpful, if you either want to send structured data in text emails, which are used to have mono-spaced fonts, or to display table information in a CLI application. Laminas\\Text\\Table supports multi-line columns, colspan and align as well. Installation Run the following to install this library: $ composer require laminas/laminas-text Documentation Browse the documentation online at https://docs.laminas.dev/laminas-text/ Support Issues Chat Forum","title":"Home"},{"location":"#laminas-text","text":"This package is considered feature-complete, and is now in security-only maintenance mode, following a decision by the Technical Steering Committee . If you have a security issue, please follow our security reporting guidelines . If you wish to take on the role of maintainer, please nominate yourself Laminas\\Text is a component to work on text strings. It contains the subcomponents: Laminas\\Text\\Figlet that enables developers to create a so called FIGlet text. A FIGlet text is a string, which is represented as ASCII art. FIGlets use a special font format, called FLT (FigLet Font). By default, one standard font is shipped with Laminas\\Text\\Figlet , but you can download additional fonts here Laminas\\Text\\Table to create text based tables on the fly with different decorators. This can be helpful, if you either want to send structured data in text emails, which are used to have mono-spaced fonts, or to display table information in a CLI application. Laminas\\Text\\Table supports multi-line columns, colspan and align as well.","title":"laminas-text"},{"location":"#installation","text":"Run the following to install this library: $ composer require laminas/laminas-text","title":"Installation"},{"location":"#documentation","text":"Browse the documentation online at https://docs.laminas.dev/laminas-text/","title":"Documentation"},{"location":"#support","text":"Issues Chat Forum","title":"Support"},{"location":"figlet/","text":"Figlets Laminas\\Text\\Figlet is a component which enables developers to create a so called FIGlet text. FIGlet text is a string represented as ASCII art. FIGlets use a special font format, called FLT (FigLet Font). By default, one standard font is shipped with Laminas\\Text\\Figlet , but you can download additional fonts at http://www.figlet.org . Compressed Fonts Laminas\\Text\\Figlet supports gzipped fonts. This means that you can take an .flf file and gzip it. To allow Laminas\\Text\\Figlet to recognize this, the gzipped font must have the extension .gz . Further, to be able to use gzipped fonts, you have to have enabled the PHP GZIP extension. Encoding Laminas\\Text\\Figlet expects your strings to be UTF-8 encoded by default. If this is not the case, you can supply the character encoding to the second parameter to the render() method. You can define multiple options for a FIGlet. When instantiating Laminas\\Text\\Figlet\\Figlet , you can supply an array, a Traversable that supplies both keys and values, or an instance of Laminas\\Config\\Config . font : Defines the font which should be used for rendering. If not defines, the built-in font will be used. outputWidth : Defines the maximum width of the output string. This is used for word-wrap as well as justification. Be careful when using small values; they may result in an undefined behaviour. The default value is 80. handleParagraphs : A boolean which indicates how new lines are handled. When set to TRUE , single new lines are ignored and instead treated as single spaces; only multiple new lines will be handled as such. The default value is FALSE . justification : May be one of the Laminas\\Text\\Figlet\\Figlet::JUSTIFICATION_* constants, which include JUSTIFICATION_LEFT , JUSTIFICATION_CENTER , and JUSTIFICATION_RIGHT The default justification is defined by the rightToLeft value. rightToLeft : Defines the direction in which text is written. May be either Laminas\\Text\\Figlet\\Figlet::DIRECTION_LEFT_TO_RIGHT or Laminas\\Text\\Figlet\\Figlet::DIRECTION_RIGHT_TO_LEFT . By default, the setting of the font file is used. When justification is not defined, a text written from right-to-left is automatically right-aligned. smushMode : An integer bitfield which defines how single characters are smushed together; can be the sum of multiple values from Laminas\\Text\\Figlet\\Figlet::SM_* . The component defines the following smush modes: SM_EQUAL , SM_LOWLINE , SM_HIERARCHY , SM_PAIR , SM_BIGX , SM_HARDBLANK , SM_KERN , and SM_SMUSH . A value of 0 doesn't disable the entire smushing, but forces SM_KERN to be applied, while a value of -1 disables it. An explanation of the different smush modes can be found here . By default the setting of the font file is used. The smush mode option is normally used only by font designers testing the various layoutmodes with a new font. Basic Usage $figlet = new Laminas\\Text\\Figlet\\Figlet(); echo $figlet-&gt;render('Laminas'); Assuming you are using a monospace font, the above results in the following: __ ___ _ _ ______ _ _ ___ _____ | || / _ \\\\ | \\ / || /_ _// | \\| || / _ \\\\ / ___// | || / //\\ \\\\ | \\/ || -| ||- | ' || / //\\ \\\\ \\___ \\\\ | ||__ | ___ ||| . . || _| ||_ | . || | ___ || / // |____// |_|| |_|||_|\\/|_|| /_____// |_|\\_|| |_|| |_|| /____// `----` `-` `-` `-` `-` `-----` `-` -` `-` `-` `-----`","title":"Figlets"},{"location":"figlet/#figlets","text":"Laminas\\Text\\Figlet is a component which enables developers to create a so called FIGlet text. FIGlet text is a string represented as ASCII art. FIGlets use a special font format, called FLT (FigLet Font). By default, one standard font is shipped with Laminas\\Text\\Figlet , but you can download additional fonts at http://www.figlet.org .","title":"Figlets"},{"location":"figlet/#basic-usage","text":"$figlet = new Laminas\\Text\\Figlet\\Figlet(); echo $figlet-&gt;render('Laminas'); Assuming you are using a monospace font, the above results in the following: __ ___ _ _ ______ _ _ ___ _____ | || / _ \\\\ | \\ / || /_ _// | \\| || / _ \\\\ / ___// | || / //\\ \\\\ | \\/ || -| ||- | ' || / //\\ \\\\ \\___ \\\\ | ||__ | ___ ||| . . || _| ||_ | . || | ___ || / // |____// |_|| |_|||_|\\/|_|| /_____// |_|\\_|| |_|| |_|| /____// `----` `-` `-` `-` `-` `-----` `-` -` `-` `-` `-----`","title":"Basic Usage"},{"location":"table/","text":"Tables Laminas\\Text\\Table is a component for creating text-based tables on the fly using decorators. This can be helpful for sending structured data in text emails, or to display table information in a CLI application. Laminas\\Text\\Table supports multi-line columns, column spans, and alignment. Encoding Laminas\\Text\\Table expects your strings to be UTF-8 encoded by default. If this is not the case, you can either supply the character encoding as a parameter to the constructor or the setContent() method of Laminas\\Text\\Table\\Column . Alternately, if you have a different encoding in the entire process, you can define the standard input charset with Laminas\\Text\\Table\\Table::setInputCharset($charset) . In case you need another output charset for the table, you can set it with Laminas\\Text\\Table\\Table::setOutputCharset($charset) . A Laminas\\Text\\Table\\Table object consists of rows which contain columns, represented by Laminas\\Text\\Table\\Row and Laminas\\Text\\Table\\Column , respectively. When creating a table, you can supply an array with options for the table. Options include: columnWidths (required): An array defining all columns width their widths in characters. decorator : The decorator to use for the table borders. The default is unicode , but you may also specify ascii or give an instance of a custom decorator object. padding : The number of characters of left and right padding within the columns. The default padding is zero. AutoSeparate : How the rows are separated with horizontal lines; the default is to separate all rows. This is defined as a bitmask containing one ore more of the following Laminas\\Text\\Table constants: Laminas\\Text\\Table\\Table::AUTO_SEPARATE_NONE Laminas\\Text\\Table\\Table::AUTO_SEPARATE_HEADER Laminas\\Text\\Table\\Table::AUTO_SEPARATE_FOOTER Laminas\\Text\\Table\\Table::AUTO_SEPARATE_ALL Where header is always the first row, and the footer is always the last row. Rows are added to the table by creating a new instance of Laminas\\Text\\Table\\Row and appending it to the table via the appendRow() method. Rows themselves have no options. You can also provide the appendRow() method with an array of options describing a row; these will then be automatically converted to a row object, containing multiple column objects. Adding columns follows the same process as adding rows. Create a new instance of Laminas\\Text\\Table\\Column and then either set the column options in the constructor or later with the set*() methods. The first parameter is the content of the column; content may have multiple lines, which should be separated by \\n characters. The second parameter defines the alignment, which is 'left' by default, but can be any of the following Laminas\\Text\\Table\\Column constant values: ALIGN_LEFT ALIGN_CENTER ALIGN_RIGHT The third parameter is the column span. For example, when you provide the value \"2\", the column will span two columns of the table. The last parameter defines the encoding of the content, which should be supplied only if the content is neither ASCII nor UTF-8. To append the column to the row, call appendColumn() in your row object with the column object as a parameter. Alternately, provide a string to the appendColumn() method. To render the table, use the render() method, or rely on the __toString() implementation to do implicit casting echo $table; // or $tableString = (string) $table`; Basic Usage $table = new Laminas\\Text\\Table\\Table([ 'columnWidths' =&gt; [10, 20] ]); // Implicitly build rows, by supply an array of column values: $table-&gt;appendRow(['Laminas', 'Framework']); // Or build the row and column manually: $row = new Laminas\\Text\\Table\\Row(); $row-&gt;appendColumn(new Laminas\\Text\\Table\\Column('Laminas')); $row-&gt;appendColumn(new Laminas\\Text\\Table\\Column('Framework')); $table-&gt;appendRow($row); echo $table; The above results in the following output: ┌──────────┬────────────────────┐ │Laminas │Framework │ |──────────|────────────────────| │Laminas │Framework │ └──────────┴────────────────────┘","title":"Tables"},{"location":"table/#tables","text":"Laminas\\Text\\Table is a component for creating text-based tables on the fly using decorators. This can be helpful for sending structured data in text emails, or to display table information in a CLI application. Laminas\\Text\\Table supports multi-line columns, column spans, and alignment.","title":"Tables"},{"location":"table/#basic-usage","text":"$table = new Laminas\\Text\\Table\\Table([ 'columnWidths' =&gt; [10, 20] ]); // Implicitly build rows, by supply an array of column values: $table-&gt;appendRow(['Laminas', 'Framework']); // Or build the row and column manually: $row = new Laminas\\Text\\Table\\Row(); $row-&gt;appendColumn(new Laminas\\Text\\Table\\Column('Laminas')); $row-&gt;appendColumn(new Laminas\\Text\\Table\\Column('Framework')); $table-&gt;appendRow($row); echo $table; The above results in the following output: ┌──────────┬────────────────────┐ │Laminas │Framework │ |──────────|────────────────────| │Laminas │Framework │ └──────────┴────────────────────┘","title":"Basic Usage"}]}